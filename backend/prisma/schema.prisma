generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            Int         @id @default(autoincrement())
  name          String
  email         String?     @unique
  password      String
  createdAt     DateTime    @default(now())
  role          UserRole    @default(user)
  phonenumber   String?     @unique
  verified      Boolean     @default(false)
  expoPushToken String?
  Complaint     Complaint[]
  UserBadge     UserBadge[]
  Vote          Vote[]
}

model Complaint {
  complaint_id          Int                     @id @default(autoincrement())
  user_id               Int
  category              Category
  title                 String
  description           String?
  status                Status                  @default(pending)
  latitude              Float?
  longitude             Float?
  address               String?
  bert_category         String?
  updated_at            DateTime                @updatedAt
  createdAt             DateTime                @default(now())
  AdminstrativeComments AdminstrativeComments[]
  user                  User                    @relation(fields: [user_id], references: [id])
  media                 Media[]
  votes                 Vote[]
}

model Media {
  media_id     Int       @id @default(autoincrement())
  complaint_id Int
  file_url     String
  file_type    FileType
  uploaded_at  DateTime  @default(now())
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  complaint    Complaint @relation(fields: [complaint_id], references: [complaint_id])
}

model Vote {
  vote_id      Int       @id @default(autoincrement())
  complaint_id Int
  user_id      Int
  vote_type    VoteType
  createdAt    DateTime  @default(now())
  complaint    Complaint @relation(fields: [complaint_id], references: [complaint_id])
  user         User      @relation(fields: [user_id], references: [id])

  @@unique([complaint_id, user_id])
}

model AdminstrativeComments {
  id           String                   @id @default(uuid())
  createdAt    DateTime                 @default(now())
  updatedAt    DateTime                 @updatedAt
  complaint_id Int
  comment      String
  type         AdminstrativeCommentType
  complain     Complaint                @relation(fields: [complaint_id], references: [complaint_id])
}

model BadgeType {
  id          Int         @id @default(autoincrement())
  name        String      @unique
  description String?
  criteria    String?
  icon_url    String?
  created_at  DateTime    @default(now())
  updated_at  DateTime    @updatedAt
  userBadges  UserBadge[]
}

model UserBadge {
  id         Int       @id @default(autoincrement())
  user_id    Int
  badge_id   Int
  awarded_at DateTime  @default(now())
  badge      BadgeType @relation(fields: [badge_id], references: [id])
  user       User      @relation(fields: [user_id], references: [id])

  @@unique([user_id, badge_id])
}

enum UserRole {
  admin
  user
}

enum AdminstrativeCommentType {
  internal
  status
  public
}

enum Category {
  roads
  streetlights
  waste
  water
  parks
  other
  ADVERTISEMENT
  ARCHITECTURE_DEPARTMENT
  ASSESSMENT_AND_COLLECTION_DEPARTMENT
  AYUSH_DEPARTMENT
  BUILDING_DEPARTMENT
  CENTRAL_ESTABLISHMENT
  COMMITTEE_AND_CORPORATION
  COMMUNITY_SERVICES
  DIRECTORATE_OF_INQUIRY
  DIRECTORATE_OF_PRESS_AND_INFORMATION
  ENVIRONMENTAL_MANAGEMENT
  EDUCATION
  ELECTION_DEPARTMENT
  ENGINEERING_DEPARTMENT
  ELECTRICAL_AND_MECHANICAL_DEPARTMENT
  FACTORY_LICENSE
  FINANCE_DEPARTMENT
  HACKNEY_CARRIAGE
  HORTICULTURE_DEPARTMENT
  HOSPITAL_ADMINISTRATION
  INFORMATION_TECHNOLOGY
  LABOUR_WELFARE_DEPARTMENT
  LAND_AND_ESTATE
  LANGUAGE_DEPARTMENT
  LAW_DEPARTMENT
  LICENSING_DEPARTMENT
  MUNICIPAL_SECRETARY_OFFICE
  ORGANIZATION_AND_METHOD_DEPARTMENT
  PUBLIC_HEALTH_DEPARTMENT
  REMUNERATIVE_PROJECT_CELL
  STATUTORY_AUDIT_DEPARTMENT
  TOWN_PLANNING
  TOLL_TAX
  VETERINARY
  VIGILANCE
}

enum Status {
  pending
  in_progress
  resolved
}

enum FileType {
  image
  video
}

enum VoteType {
  like
  dislike
}
